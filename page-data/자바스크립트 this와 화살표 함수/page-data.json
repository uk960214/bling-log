{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/자바스크립트 this와 화살표 함수/",
    "result": {"data":{"site":{"siteMetadata":{"title":"✨ bling-log ✨"}},"markdownRemark":{"id":"aa96ea28-82dd-51d1-82d8-e56b9c248480","excerpt":"마주한 문제 이벤트 핸들러를 추가하는 과정에서 인스턴스의 매서드에 연결하는 과정에서 호출된 매서드의 가 인스턴스가 아닌 이벤트를 호출 시킨 DOM…","html":"<h1>마주한 문제</h1>\n<p>이벤트 핸들러를 추가하는 과정에서 인스턴스의 매서드에 연결하는 과정에서 호출된 매서드의 <code class=\"language-text\">this</code>가 인스턴스가 아닌 이벤트를 호출 시킨 DOM 요소로 지정되어서 <code class=\"language-text\">this</code>를 사용해 인스턴스의 프로퍼티에 접근할 수 없었다!</p>\n<h1>해결책</h1>\n<p>매서드를 정의할 때, 일반 함수(매서드)로 선언하는 것이 아니라 화살표 함수로 정의한다!</p>\n<p>그러면 this가 이벤트 객체인 요소를 가리키지 않고 인스턴스를 가리켜 제대로 작동한다.</p>\n<h1>원인 분석</h1>\n<h2>자바스크립트에서 <code class=\"language-text\">this</code></h2>\n<blockquote>\n<p>화살표 함수는 자신의 <code class=\"language-text\">this</code>가 없습니다.  대신 화살표 함수를 둘러싸는 렉시컬 범위(lexical scope)의 <code class=\"language-text\">this</code>가 사용됩니다; 화살표 함수는 일반 변수 조회 규칙(normal variable lookup rules)을 따릅니다. 때문에 현재 범위에서 존재하지 않는 <code class=\"language-text\">this</code>를 찾을 때, 화살표 함수는 바로 바깥 범위에서 <code class=\"language-text\">this</code>를 찾는 것으로 검색을 끝내게 됩니다.</p>\n</blockquote>\n<p>ES6 이전에는 자바스크립트에서 <code class=\"language-text\">this</code>는 호출한 방법에 따라서만 좌우되었다.</p>\n<p>전역에서 호출한 경우 그 함수 내부에서 <code class=\"language-text\">this</code>는 전역 객체를 참조하고, this의 문맥을 넘겨주기 위해서는 호출 시에 <code class=\"language-text\">call</code> 혹은 <code class=\"language-text\">apply</code>를 통해서 넘겨주어야 했다.</p>\n<p>ES5에서는 새로 <code class=\"language-text\">bind</code>가 도입되었는데 호출 시에 함수에 <code class=\"language-text\">bind</code>를 한 경우 호출된 함수와 동일한 코드를 복사해서 <code class=\"language-text\">bind</code>의 첫 번째 매개 변수를 <code class=\"language-text\">this</code>로 고정하는 새로운 함수를 생성한다.</p>\n<blockquote>\n<p>화살표 함수 도입에 영향을 준 두 요소: 보다 짧아진 함수 및  <code class=\"language-text\">바인딩하지 않은 this.</code></p>\n</blockquote>\n<p>ES6에서 화살표 함수가 도입되는 데 영향을 미친 두 요소 중 하나가 바로 <code class=\"language-text\">bind</code>이다.</p>\n<blockquote>\n<p>현재 범위에서 존재하지 않는 <code class=\"language-text\">this</code>를 찾을 때, 화살표 함수는 바로 바깥 범위에서 <code class=\"language-text\">this</code>를 찾는 것으로 검색을 끝내게 됩니다.</p>\n</blockquote>\n<p>객체의 매서드로는 아래와 같은 현상이 나타난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// does not create a new scope</span>\r\n  <span class=\"token literal-property property\">i</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">c</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints undefined, Window {...} (or the global object)</span>\r\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 10, Object {...}</span></code></pre></div>\n<p>위 예시에서 <code class=\"language-text\">obj</code>는 전역에서 정의되고 사용되어 블록 내부에서 <code class=\"language-text\">this</code>는 전역 객체인 <code class=\"language-text\">window</code>를 가리킨다. <code class=\"language-text\">b</code>와 <code class=\"language-text\">c</code>는 모두 <code class=\"language-text\">this</code>를 참조하도록 되어있지만 화살표 함수인 <code class=\"language-text\">b</code>에서 <code class=\"language-text\">this</code>는 <code class=\"language-text\">obj</code>의 <code class=\"language-text\">this</code>인 <code class=\"language-text\">window</code>를, 일반 매서드인 <code class=\"language-text\">c</code>에서 <code class=\"language-text\">this</code>는 해당 객체와 연결된다.</p>\n<blockquote>\n<p>함수를 어떤 객체의 메서드로 호출하면 <code class=\"language-text\">this</code>의 값은 그 객체를 사용합니다.</p>\n</blockquote>\n<h2>다시 이벤트로 돌아와서</h2>\n<p><code class=\"language-text\">addEventListener</code> 자체도 <code class=\"language-text\">EventTarget</code>이라는 인터페이스의 매서드로 이벤트를 제공하는 모든 객체에 대해서 리스너를 추가하는 기능을 한다. 그 말인 즉 <code class=\"language-text\">addEventListener</code>의 내부에서 <code class=\"language-text\">this</code>는 소속된 객체인 이벤트 객체라는 것을 의미한다.</p>\n<p>원래 아래와 같이 클래스 내부에서 매서드를 이벤트 핸들러로 추가해줬었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someDom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.something'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someDom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onDomClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t\r\n\t<span class=\"token function\">onDomClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;button class=\"something\">...&lt;/button></span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 구현된 코드에서는 <code class=\"language-text\">this</code>가 DOM 요소로 log된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someDom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.something'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someDom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onDomClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t\r\n\t<span class=\"token function-variable function\">onDomClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Controller {...}</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>결론</h1>\n<p>이벤트 핸들러 함수 안에서 인스턴스에 접근하기 위해 <code class=\"language-text\">this</code>를 사용하고 싶으면 매서드를 화살표 함수로 정의해야 한다.</p>\n<hr>\n<p>출처</p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/EventTarget/addEventListener\">https://developer.mozilla.org/ko/docs/Web/API/EventTarget/addEventListener</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/EventTarget\">https://developer.mozilla.org/ko/docs/Web/API/EventTarget</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions#%EB%A9%94%EC%86%8C%EB%93%9C%EB%A1%9C_%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94_%ED%99%94%EC%82%B4%ED%91%9C_%ED%95%A8%EC%88%98\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this</a></p>","frontmatter":{"title":"자바스크립트 this와 화살표 함수","date":"February 24, 2022","description":null}},"previous":{"fields":{"slug":"/TDD와 E2E 테스트 작성하기/"},"frontmatter":{"title":"TDD와 E2E 테스트 작성하기"}},"next":{"fields":{"slug":"/MVC에서 한 발짝 멀어지기/"},"frontmatter":{"title":"MVC에서 한 발짝 멀어지기"}}},"pageContext":{"id":"aa96ea28-82dd-51d1-82d8-e56b9c248480","previousPostId":"28e6594d-3e64-5f6e-a3a6-1f5b940b81a5","nextPostId":"2d6bff74-248e-5895-aa0b-70c7ad0ff7e6"}},
    "staticQueryHashes": ["2841359383","3257411868"]}